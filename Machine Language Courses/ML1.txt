LEZIONE 1 DI LINGUAGGIO MACCHINA 

** Com'è fatto un computer:

1. CPU
    È il "cervello" del computer, dove vengono eseguite tutte le istruzioni e i calcoli.
    Esegue operazioni logiche, aritmetiche e di controllo.
    
    * Componenti interni:
    
    1.1 Core, Ogni core è in grado di eseguire istruzioni indipendentemente.
    1.2 Cache,  Memoria ultrarapida per memorizzare dati temporanei.
    1.3 ALU,  Esegue calcoli matematici e operazioni logiche.
    1.4 CU, Gestisce il flusso delle istruzioni e coordina le operazioni della CPU.

    * Architettura processori: 

    1.5 CISC (Complex Instruction Set Computer):  Istruzioni complesse e variabili in lunghezza.
    1.6 RISC (Reduced Instruction Set Computer): Istruzioni semplici e uniformi, esecuzione più veloce.
2. RAM 
    Memoria volatile che conserva dati e programmi in uso temporaneamente.
    Consente di accedere rapidamente ai dati durante l’esecuzione dei programmi.
    È veloce, ma i dati vengono persi quando il computer viene spento.
    Esempi di RAM: DDR4, DDR5.

3. Scheda Madre
    Il circuito principale che collega e permette la comunicazione tra tutti i componenti.

    * Componenti interni:

    1.1 Socket CPU, Dove viene inserita la CPU.
    1.2 Slot RAM, Dove vengono inseriti i moduli RAM.
    1.3 Chipset, Coordina il traffico dati tra CPU, RAM e periferiche.
    1.4 Slot PCle,  Per schede di espansione come schede video.
    1.5 Connettori SATA/M.2, er collegare unità di archiviazione (SSD, HDD).
    1.6 BIOS/UEFI, Firmware che gestisce l’avvio del sistema.

4. HDD
    Unità di archiviazione magnetica tradizionale.
    Capacità Elevata, piu lento rispetto agli SSD e contiene parti meccaniche.

5. SSD
    Unità di archiviazione basata su memoria flash.
    Molto veloce degli HDD, non ha parti mobili.

    5.1. NVMe SSD
    Una versione avanzata di SSD collegata tramite interfaccia PCIe.
    Velocità di lettura/scrittura estremamente elevate. Ideale per carichi di lavoro intensivi e gaming.

6. GPU 
    Gestisce la grafica e le immagini visualizzate sullo schermo.
    Può essere integrata, quindi inclusa nella CPU, o Dedicata, quindi separata con propria memoria VRAM
    Rendering di immagini, video e grafica 3D. Essenziale per gaming, design grafico e calcoli paralleli.

7. Alimentatore 
    Fornisce energia elettrica a tutti i componenti del computer. Potenza misurata in Watt (es. 500W, 750W).

8. Case
    La struttura che contiene tutti i componenti del computer.

9. Dispositivo I/O
    INPUT: Tastiera, mouse, scanner, microfono e webcam 
    OUTPUT: Monitor, Stampante, casse, cuffie, proiettore

10. Sistema di Raffreddamento
    Raffreddamento ad aria: Ventole e dissipatori di calore.
    Raffreddamento a liquido: Circuito con liquido refrigerante per dissipare il calore in modo più efficiente.
    Evitare il surriscaldamento della CPU, GPU e altri componenti.

---
** Teoria, cos è il linguaggio macchina?

è l' unica forma piu bassa di linguaggio di programmazione, comprensibile e utilizzabile dal processore di un computer.
è una sequenza di istruzioni binarie che la CPU puo eseguire senza alcuna traduzione o interpretazione. 
Ogni istruzione corrisponde ad una serie di bit (0 o 1).
    Ogni processore ha il proprio linguaggio macchina, che dipende dalla sua architettura interna (ad esempio, x86, ARM, RISC-V).
    Essendo costituito da sequenze binarie, è estremamente complicato da leggere e scrivere per gli esseri umani.

- Assembly è rappresentazione testuale del linguaggio macchina leggibile per l'uomo
- Python ... devono essere 'tradotti'

* Istruzione 

Ogni istruzione è divisa in:
1. Opcode (Operation Code): Specifica l'operazione da eseguire (ad es. addizione, spostamento di dati, confronto, ecc.).
2. Operandi: Indicano su quali dati o registri deve operare l'istruzione.

10111000 00001100 -> carica il valore 12 nel registro A
10110000 01100001 -> Carica il valore 61 nel registro AL

ESEMPI: 
MOV A, 12	Carica il valore 12 nel registro A
ADD A, B	Somma il contenuto dei registri A e B
SUB A, 5	Sottrae 5 dal contenuto del registro A
JMP 1000	Salta all'indirizzo di memoria 1000
CMP A, B	Confronta i registri A e B

* Componenti 

1. Registri 
    - Registri di Dati: Conservano valori numerici durante le operazioni (es. AX, BX).
    - Registri di Indirizzi: Memorizzano indirizzi di memoria (es. SI – Source Index, DI – Destination Index).
    - Registri di Stato (Flags): Conservano informazioni sul risultato delle operazioni (es. Zero Flag, Carry Flag).
    - Program Counter (PC): Tiene traccia dell'istruzione successiva da eseguire.

2. Indirizzi di memoria 
3. Istruzione di controllo 

* Alto livello to Macchina 
1. Compilazione:  Un compilatore traduce l'intero codice sorgente in linguaggio macchina. Esempi di compilatori includono gcc (per C) e javac (per Java).
2. Interpretazione: Un interprete esegue il codice sorgente riga per riga traducendolo dinamicamente in istruzioni di linguaggio macchina. Ad esempio, l'interprete di Python esegue il codice durante l'esecuzione.

* Ciclo di Esecuzione 
1. Fetch: Il processore preleva l'istruzione dalla memoria.
2. Decode: L'istruzione viene decodificata per capire quale operazione eseguire.
3. Execute: L'operazione viene eseguita, e il risultato viene memorizzato in un registro o in memoria.

* Esempio di Traduzione da Linguaggio di Alto Livello a Assembly e Macchina

    - Codice in C:
        int a = 5;
        int b = 10;
        int c = a + b;

    - Traduzione in Assembly(x86):
        MOV AX, 5       ; Carica 5 nel registro AX
        MOV BX, 10      ; Carica 10 nel registro BX
        ADD AX, BX      ; Somma i registri AX e BX (AX = AX + BX)
        MOV CX, AX      ; Sposta il risultato nel registro CX

    - Traduzione in Linguaggio Macchina:
        10111000 00000101  ; MOV AX, 5
        10111011 00001010  ; MOV BX, 10
        00000011 11000000  ; ADD AX, BX
        10001001 11000000  ; MOV CX, AX

* Pro e Contro 
    Vantaggi	                                    Svantaggi
    Esecuzione veloce e diretta	                    Difficile da leggere e scrivere per gli umani
    Ottimizzazione massima delle risorse hardware	Dipendente dall'architettura del processore
    Controllo totale sul funzionamento della CPU	Prona agli errori a causa della complessità

* Applicazioni del Linguaggio Macchina
    .Sviluppo di sistemi embedded (microcontrollori, dispositivi IoT).
    .Sviluppo di firmware e driver di basso livello.
    .Reverse engineering e analisi di malware.
    .Ottimizzazione delle performance in applicazioni critiche come videogiochi e sistemi di controllo industriale.